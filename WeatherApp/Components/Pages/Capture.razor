@page "/capture"
@using WeatherApp.Data.Models
@using WeatherApp.Services.Interfaces

@rendermode InteractiveServer
@inject IWeather WeatherService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager


<h3>Capture new weather readings</h3>

<form class="capture-form mt-5">
    <input hidden @bind="weather.Id"/>
    <input hidden @bind="weather.TimeStamp"/>
    <div class="form-group mb-3 bg-dark">
        <label>Latitude</label>
        <input class="form-control bg-dark text-white" id="latitude" @bind="@weather.Longitude" />
    </div>
    <div class="form-group mb-3">
        <label>Longitude</label>
        <input class="form-control bg-dark text-white" id="longitude" @bind="@weather.Longitude" />
    </div>

    <div class="form-group mb-3">
        <label>Temperature</label>
        <input class="form-control bg-dark text-white" @bind="@weather.Temperature" />
    </div>
    <div class="form-group mb-3">
        <label>Feels Like</label>
        <input class="form-control bg-dark text-white" @bind="@weather.FeelLikeTemp" />
    </div>

    <div class="form-group mb-3">
        <label>Conditions</label>
        <input class="form-control bg-dark text-white" @bind="@weather.Conditions" />
    </div>
    <div class="form-group mb-3">
        <label>Description</label>
        <input class="form-control bg-dark text-white" @bind="@weather.Description" />
    </div>
    <div class="form-group mb-3">
        <label>Humidity</label>
        <input class="form-control bg-dark text-white" @bind="@weather.Humidity" />
    </div>
    <button class="btn btn-primary bg-dark text-white" @onclick="CaptureWeatherInfo">Save</button>
</form>

@code {

    IEnumerable<WeatherDTO> allEntries = new List<WeatherDTO>();

    WeatherDTO weather = new WeatherDTO();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        allEntries = await WeatherService.GetAllWeatherInfoUser();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ExecuteJavaScript();
        }
    }

    private async Task ExecuteJavaScript()
    {
        await JSRuntime.InvokeVoidAsync("getCurrentPosition");
    }

    public async Task CaptureWeatherInfo()
    {
        weather.Id = Guid.NewGuid().ToString();
        weather.TimeStamp = DateTime.Now;
        await WeatherService.AddWeatherInfo(weather);
        await WeatherService.SaveChanges();
        allEntries = await WeatherService.GetAllWeatherInfoUser();
        NavManager.NavigateTo("/weather");
    }
}

    
<script>
    function getCurrentPosition() {
        navigator.geolocation.getCurrentPosition(function (position) {
            var latitude = position.coords.latitude;
            var longitude = position.coords.longitude;
            document.getElementById("latitude").value = latitude;
            document.getElementById("longitude").value = longitude;
        });
    }
</script>

